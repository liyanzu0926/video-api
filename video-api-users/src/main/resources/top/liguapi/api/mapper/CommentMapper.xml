<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.liguapi.api.mapper.CommentMapper">
    <resultMap id="BaseResultMap" type="top.liguapi.api.entity.pojo.Comment">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="uid" jdbcType="INTEGER" property="uid"/>
        <result column="video_id" jdbcType="INTEGER" property="videoId"/>
        <result column="parent_id" jdbcType="INTEGER" property="parentId"/>
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
        <result column="deleted_at" jdbcType="TIMESTAMP" property="deletedAt"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="top.liguapi.api.entity.pojo.Comment">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">

            id, uid, video_id, parent_id, created_at, updated_at, deleted_at

    </sql>
    <sql id="Blob_Column_List">

            content

    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="top.liguapi.api.entity.pojo.CommentExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from comment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="top.liguapi.api.entity.pojo.CommentExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from comment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from comment
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">

            delete from comment
            where id = #{id,jdbcType=INTEGER}

    </delete>
    <delete id="deleteByExample" parameterType="top.liguapi.api.entity.pojo.CommentExample">
        delete from comment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="top.liguapi.api.entity.pojo.Comment">

            insert into comment (id, uid, video_id,
              parent_id, created_at, updated_at,
              deleted_at, content)
            values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, #{videoId,jdbcType=INTEGER},
              #{parentId,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP},
              #{deletedAt,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})

    </insert>
    <insert id="insertSelective" parameterType="top.liguapi.api.entity.pojo.Comment">
        insert into comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="uid != null">
                uid,
            </if>
            <if test="videoId != null">
                video_id,
            </if>
            <if test="parentId != null">
                parent_id,
            </if>
            <if test="createdAt != null">
                created_at,
            </if>
            <if test="updatedAt != null">
                updated_at,
            </if>
            <if test="deletedAt != null">
                deleted_at,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="videoId != null">
                #{videoId,jdbcType=INTEGER},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null">
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="deletedAt != null">
                #{deletedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="top.liguapi.api.entity.pojo.CommentExample" resultType="java.lang.Long">
        select count(*) from comment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update comment
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.uid != null">
                uid = #{record.uid,jdbcType=INTEGER},
            </if>
            <if test="record.videoId != null">
                video_id = #{record.videoId,jdbcType=INTEGER},
            </if>
            <if test="record.parentId != null">
                parent_id = #{record.parentId,jdbcType=INTEGER},
            </if>
            <if test="record.createdAt != null">
                created_at = #{record.createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updatedAt != null">
                updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="record.deletedAt != null">
                deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update comment
        set id = #{record.id,jdbcType=INTEGER},
        uid = #{record.uid,jdbcType=INTEGER},
        video_id = #{record.videoId,jdbcType=INTEGER},
        parent_id = #{record.parentId,jdbcType=INTEGER},
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
        deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
        content = #{record.content,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update comment
        set id = #{record.id,jdbcType=INTEGER},
        uid = #{record.uid,jdbcType=INTEGER},
        video_id = #{record.videoId,jdbcType=INTEGER},
        parent_id = #{record.parentId,jdbcType=INTEGER},
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
        deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="top.liguapi.api.entity.pojo.Comment">
        update comment
        <set>
            <if test="uid != null">
                uid = #{uid,jdbcType=INTEGER},
            </if>
            <if test="videoId != null">
                video_id = #{videoId,jdbcType=INTEGER},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="deletedAt != null">
                deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="top.liguapi.api.entity.pojo.Comment">

            update comment
            set uid = #{uid,jdbcType=INTEGER},
              video_id = #{videoId,jdbcType=INTEGER},
              parent_id = #{parentId,jdbcType=INTEGER},
              created_at = #{createdAt,jdbcType=TIMESTAMP},
              updated_at = #{updatedAt,jdbcType=TIMESTAMP},
              deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
              content = #{content,jdbcType=LONGVARCHAR}
            where id = #{id,jdbcType=INTEGER}

    </update>
    <update id="updateByPrimaryKey" parameterType="top.liguapi.api.entity.pojo.Comment">

            update comment
            set uid = #{uid,jdbcType=INTEGER},
              video_id = #{videoId,jdbcType=INTEGER},
              parent_id = #{parentId,jdbcType=INTEGER},
              created_at = #{createdAt,jdbcType=TIMESTAMP},
              updated_at = #{updatedAt,jdbcType=TIMESTAMP},
              deleted_at = #{deletedAt,jdbcType=TIMESTAMP}
            where id = #{id,jdbcType=INTEGER}

    </update>

    <select id="selectCommentsByVideoId" resultType="top.liguapi.api.entity.dto.ItemsDTO">
    </select>

    <resultMap id="getCommentsByVideoIdResultMap" type="top.liguapi.api.entity.dto.ItemsDTO">
        <id column="p_id" property="id"/>
        <result column="p_content" property="content"/>
        <result column="p_created_at" property="created_at"/>
        <collection property="reviewer" ofType="top.liguapi.api.entity.dto.ReviewerDTO">
            <id column="u1_id" property="id"/>
            <result column="u1_name" property="name"/>
            <result column="u1_avatar" property="avatar"/>
        </collection>
        <collection property="sub_comments" ofType="top.liguapi.api.entity.dto.SubCommentListDTO">
            <id column="s_id" property="id"/>
            <result column="s_parent_id" property="parent_id"/>
            <result column="s_content" property="content"/>
            <result column="s_created_at" property="created_at"/>
            <collection property="reviewer" ofType="top.liguapi.api.entity.dto.ReviewerDTO">
                <id column="u2_id" property="id"/>
                <result column="u2_name" property="name"/>
                <result column="u2_avatar" property="avatar"/>
            </collection>
        </collection>
    </resultMap>
    <select id="getCommentsByVideoId" resultMap="getCommentsByVideoIdResultMap">

            SELECT
            u1.id AS u1_id,
            u1.name AS u1_name,
            u1.avatar AS u1_avatar,
            p.id AS p_id,
            p.content AS p_content,
            p.created_at AS p_created_at,
            u2.id AS u2_id,
            u2.name AS u2_name,
            u2.avatar AS u2_avatar,
            s.id AS s_id,
            s.parent_id AS s_parent_id,
            s.content AS s_content,
            s.created_at AS s_created_at
        FROM
            `comment` AS p
            LEFT JOIN `user` AS u1 ON p.uid = u1.id
            LEFT JOIN `comment` AS s ON p.id = s.parent_id
            LEFT JOIN `user` AS u2 ON s.uid = u2.id
        WHERE
            p.video_id = #{videoId}

    </select>
</mapper>